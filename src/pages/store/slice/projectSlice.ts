/* eslint-disable @typescript-eslint/no-explicit-any */
import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import projectClient from "../../../clients/projectService";

export type Project = {
  _id: string;
  title: string;
  description: string;
  createdAt: string;
  ownerId: string;
};

type ProjectState = {
  projects: Project[];
  total: number;
  loading: boolean;
  error: string | null;
};

const initialState: ProjectState = {
  projects: [],
  total: 0,
  loading: false,
  error: null,
};

//createAsyncThunk accepts two args
//THE FIRST ONE is a string that is used as the prefix for the generated action type
//THE SECOND ONE is the payload creator callback => this func should promise to return some data/error
export const fetchProjects = createAsyncThunk(
  "project/fetchProjects",
  async (
    params: { page: number; limit: number; query: string; ownedBy: string },
    thunkAPI
  ) => {
    try {
      const { page, limit, query, ownedBy } = params;
      const skip = (page - 1) * limit;
      const queryParams = new URLSearchParams();
      if (query) queryParams.append("query", query);
      if (ownedBy) queryParams.append("ownedBy", ownedBy);
      queryParams.append("skip", skip.toString());
      queryParams.append("limit", limit.toString());
      const response = await projectClient.get(
        `/project?${queryParams.toString()}`
      );
      return {
        projects: response.data.projects,
        total: response.data.total,
      };
    } catch (error: any) {
      return thunkAPI.rejectWithValue(
        error.message || "Failed to fetch projects."
      );
    }
  }
);

const projectSlice = createSlice({
  name: "post",
  initialState,
  reducers: {},
  //this receive a builder param
  extraReducers(builder) {
    //an optional configuration object that allows you to define additional reducers that respond
    //to actions generated by other parts of the application, such as thunks or other slices
    builder
      //in case that the promise returns pending
      .addCase(fetchProjects.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      //in case that the promise returns fulfilled
      .addCase(fetchProjects.fulfilled, (state, action) => {
        state.loading = false;
        state.projects = action.payload.projects;
        state.total = action.payload.total;
      })
      //in case that the promise returns rejected
      .addCase(fetchProjects.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload as string;
      });
  },
});

export default projectSlice.reducer;
